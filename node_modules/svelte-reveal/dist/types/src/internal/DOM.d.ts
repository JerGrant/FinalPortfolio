import type { RevealOptions } from './types';
/**
 * Marks a DOM node as part of the reveal process.
 * @param revealNode The element to be marked.
 * @returns The marked DOM element.
 */
export declare const markRevealNode: (revealNode: HTMLElement) => HTMLElement;
/**
 * Activates the reveal effect on the target element.
 * @param revealNode The element to be revealed.
 * @param transitionPropertiesCSSClass The CSS class to be used to create the transition properties on the target element.
 * @param transitionDeclarationCSSClass The CSS class to be used to declare the transition on the target element.
 * @param options The options to be applied to the reveal effect.
 * @returns The element to be revealed.
 */
export declare const activateRevealNode: (revealNode: HTMLElement, transitionPropertiesCSSClass: string, transitionDeclarationCSSClass: string, options: Required<RevealOptions>) => HTMLElement;
/**
 * Get the HTML element to be revealed.
 * @param node The HTML element passed by the svelte action.
 * @returns The HTML element to be revealed.
 */
export declare const getRevealNode: (node: HTMLElement) => HTMLElement;
/**
 * Creates an Intersection Observer for the reveal node.
 * @param canDebug Toggles logging for the Intersection Observer notifications.
 * @param highlightText The color hex code to be used to color the logs.
 * @param revealNode The HTML node to observe.
 * @param options The reveal options.
 * @param className The CSS class to add/remove from/to the target element.
 * @returns The created Intersection Observer.
 */
export declare const createObserver: (canDebug: boolean, highlightText: string, revealNode: HTMLElement, options: Required<RevealOptions>, className: string) => IntersectionObserver;
/**
 * Logs data about the reveal node, the default options and the global configuration.
 * @param finalOptions The library options merged with the ones provided by the user.
 * @param revealNode The DOM element to be revealed.
 * @returns A tuple consisting of canDebug and highlightText.
 */
export declare const logInfo: (finalOptions: Required<RevealOptions>, revealNode: HTMLElement) => [boolean, string];

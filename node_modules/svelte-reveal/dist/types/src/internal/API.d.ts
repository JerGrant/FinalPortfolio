import type { RevealConfig, Device, IDevice, Responsive, RevealOptions, IObserverOptions } from './types';
/**
 * Sets the development mode status.
 * @param dev The development mode status.
 * @returns The config object with the updated `dev` property.
 */
export declare const setDev: (dev: boolean) => RevealConfig;
/**
 * Sets the reveal animations activation status on page reload.
 * @param once Whether the reveal animations run only once (i.e. they do not re-run on page reload).
 * @returns The config object with the updated `once` property,
 */
export declare const setOnce: (once: boolean) => RevealConfig;
/**
 * Sets the status of a device.
 * @param device The device to enable/disable.
 * @param status The new status for `device`.
 * @returns The config object with the updated corresponding device enabled property.
 */
export declare const setDeviceStatus: (device: Device, status: boolean) => RevealConfig;
/**
 * Sets the status of multiple devices.
 * @param devices The devices to enabled/disable.
 * @param status The devices' new status.
 * @returns The config object with the updated devices enabled property.
 */
export declare const setDevicesStatus: (devices: Device[], status: boolean) => RevealConfig;
/**
 * Sets the breakpoint of a device.
 * @param device The device to update with `breakpoint`.
 * @param breakpoint The new breakpoint for `device`.
 * @returns The config object with the updated device breakpoint property.
 */
export declare const setDeviceBreakpoint: (device: Device, breakpoint: number) => RevealConfig;
/**
 * Sets the settings of a device.
 * @param device The device to update with `settings`.
 * @param settings The new settings for `device`.
 * @returns The config object with the updated device settings.
 */
export declare const setDevice: (device: Device, settings: IDevice) => RevealConfig;
/**
 * Updates how responsiveness is handled by the library.
 * @param responsive An object that instructs the library how to handle responsiveness.
 * @returns The config object with the updated responsive property.
 */
export declare const setResponsive: (responsive: Responsive) => RevealConfig;
/**
 * Sets the Intersection Observer root element.
 * @param root The new Intersection Observer root element.
 * @returns The Intersection Obsever configuration with the updated `root` property.
 */
export declare const setObserverRoot: (root: IntersectionObserver['root']) => IObserverOptions;
/**
 * Sets the Intersection Observer rootMargin property.
 * @param rootMargin The new rootMargin used by the Intersection Observer.
 * @returns The Intersection Observer configuration with the updated `rootMargin` property.
 */
export declare const setObserverRootMargin: (rootMargin: IntersectionObserver['rootMargin']) => IObserverOptions;
/**
 * Sets the Intersection Observer threshold property.
 * @param threshold The new threshold used by the Intersection Observer.
 * @returns The Intersection Observer configuration object with the updated `threshold` property.
 */
export declare const setObserverThreshold: (threshold: number) => IObserverOptions;
/**
 * Sets the Intersection Observer configuration.
 * @param observerConfig The new Intersection Observer configuration.
 * @returns The updated configuration used to manage the Intersection Observer behavior.
 */
export declare const setObserverConfig: (observerConfig: Partial<IObserverOptions>) => IObserverOptions;
/**
 * Updates the global configuration of this library.
 * @param userConfig The new custom configuration.
 * @returns The updated config object.
 */
export declare const setConfig: (userConfig: RevealConfig) => RevealConfig;
/**
 * Updates the default options to be used for the reveal effect.
 * @param options The new default options.
 * @returns The updated default options.
 */
export declare const setDefaultOptions: (options: RevealOptions) => Required<RevealOptions>;

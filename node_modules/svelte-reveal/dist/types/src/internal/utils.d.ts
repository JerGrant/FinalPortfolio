import type { IObserverOptions, RevealConfig, RevealOptions } from './types';
/**
 * Deep clones a given item.
 * @param item What needs to be cloned.
 * @returns The cloned item.
 */
export declare const clone: <T>(item: T) => T;
/**
 * Removes trailing whitespace, newlines and tabs from a string.
 * @param str The string to be cleaned.
 * @returns The cleaned string.
 */
export declare const clean: (str: string) => string;
/**
 * Creates a clone of the global configuration used by the library.
 * @returns The configuration clone.
 */
export declare const getConfigClone: () => RevealConfig;
/**
 * Creates an object containing all the options needed to configure an Intersection Observer.
 * @param observerConfig The Intersection Observer config.
 * @returns The provided Intersection Observer config, with default values applied in case of unspecified properties.
 */
export declare const createObserverConfig: (observerConfig?: Partial<IObserverOptions>) => {
    root: Element | Document | null;
    rootMargin: string;
    threshold: number;
};
/**
 * Overrides the default options values with the ones provided by the user.
 * @param userOptions The options provided by the user.
 * @returns The final options that can be used by the rest of the library.
 */
export declare const createFinalOptions: (userOptions: RevealOptions) => Required<RevealOptions>;
